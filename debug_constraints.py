#!/usr/bin/env python3
"""
Debug script to test hard constraint evaluation for Z3 vs Gurobi
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ski_planner_metrics import SkiPlannerMetrics, PlannerResult

def test_constraint_evaluation():
    """Test the constraint evaluation with realistic Z3 and Gurobi outputs"""
    
    metrics = SkiPlannerMetrics()
    
    # Simulate Z3 result - similar to what we saw in the benchmark
    z3_result = PlannerResult(
        planner_name="Z3",
        query="Plan a 3-day ski trip to Livigno for 2 people with budget 1500 euros",
        result_type="optimal",
        plan_text="""Z3 SKI TRIP PLAN:
DESTINATION: Livigno
DURATION: 3 days
PEOPLE: 2
BUDGET: ‚Ç¨1500
SELECTED RESORT: Livigno  Carosello/?Mottolino
RESORT DETAILS:
- Resort: Livigno  Carosello/?Mottolino
- Price per day: ‚Ç¨243
- Beds available: 4
- Rating: 4.6/5
EQUIPMENT RENTAL:
- No equipment rental selected
CAR RENTAL:
- No car rental selected
COST BREAKDOWN:
- Accommodation: ‚Ç¨729.00
- Equipment: ‚Ç¨0.00
- Car rental: ‚Ç¨0.00
- TOTAL COST: ‚Ç¨729.00
BUDGET STATUS: ‚úÖ Within budget
Generated by: Z3 Constraint Solver with Real Data Integration""",
        cost=729.0,
        runtime=2.9
    )
    
    # Simulate Gurobi result
    gurobi_result = PlannerResult(
        planner_name="Gurobi",
        query="Plan a 3-day ski trip to Livigno for 2 people with budget 1500 euros",
        result_type="optimal",
        plan_text="""### GUROBI SKI TRIP PLAN
**Query:** Plan a 3-day ski trip to Livigno for 2 people with budget 1500 euros
**Result:** Optimal solution found!
**Selected Resort:** Livigno  Carosello/?Mottolino
**Total Cost:** ‚Ç¨729.00
**Cost Breakdown:**
- Accommodation: ‚Ç¨729.00

#### Accommodation
- Stay at Livigno  Carosello/?Mottolino for 3 days.

#### Car Rental
- No car rental selected.

#### Equipment Rental
- No equipment rental selected.""",
        cost=729.0,
        runtime=3.1
    )
    
    print("=== DEBUGGING HARD CONSTRAINT EVALUATION ===\n")
    
    # Test Z3 result
    print("üîç Z3 RESULT ANALYSIS:")
    print(f"Cost: ‚Ç¨{z3_result.cost}")
    print(f"Resort Name: {z3_result.resort_name}")
    print(f"Accommodation: {z3_result.accommodation}")
    print(f"Car Rental: {z3_result.car_rental}")
    print(f"Equipment Rental: {z3_result.equipment_rental}")
    
    z3_metrics = metrics.evaluate_single_result(z3_result)
    
    print(f"\nZ3 Hard Constraint Micro: {z3_metrics['hard_constraint_micro']}")
    print(f"Z3 Hard Constraint Macro: {z3_metrics['hard_constraint_macro']}")
    
    # Test Gurobi result
    print("\nüîç GUROBI RESULT ANALYSIS:")
    print(f"Cost: ‚Ç¨{gurobi_result.cost}")
    print(f"Resort Name: {gurobi_result.resort_name}")
    print(f"Accommodation: {gurobi_result.accommodation}")
    print(f"Car Rental: {gurobi_result.car_rental}")
    print(f"Equipment Rental: {gurobi_result.equipment_rental}")
    
    gurobi_metrics = metrics.evaluate_single_result(gurobi_result)
    
    print(f"\nGurobi Hard Constraint Micro: {gurobi_metrics['hard_constraint_micro']}")
    print(f"Gurobi Hard Constraint Macro: {gurobi_metrics['hard_constraint_macro']}")
    
    # Extract query parameters to see what constraints are being checked
    query_params = metrics.query_extractor.extract_parameters(z3_result.query)
    print(f"\nüìã EXTRACTED QUERY PARAMETERS:")
    for key, value in query_params.items():
        if value is not None and value != [] and value != False:
            print(f"  {key}: {value}")

if __name__ == "__main__":
    test_constraint_evaluation()
