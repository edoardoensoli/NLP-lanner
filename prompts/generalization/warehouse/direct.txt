Now, you are given a JSON constraint of a warehouse robot routing problem. 
The robot are given a task list "task_id" of length n and needs to finish them one by one. In the warehouse, there are "total_station_number" stations, where the robots can visit stations to finish different tasks. 
The robot needs to finish n tasks while minimizing the total distance travelled. When calculating total travel distance, make sure to include 1.the distance to travel from origin (0) to first station; 2.distance between n stations; 3.distance to travel from last station back to origin(0).
Collect information based on the problem setting or, based on the information you collect, analyze current situation or give a final plan. You can only give a plan once. 
Info collecting can take 2 different actions: 
(1) StationSearch(tasks):
Description: A station-task information retrieval tool.
Parameters:
    tasks: The required task list robot need to finish.
Example: StationSearch([1, 3]) would fetch station id lists that robot could use to accomplish task 1 and 3.

(2) DistanceSearch():
Description: A distance information retrieval tool that gives a distance matrix of all stations

You can take an action to analyze current situation and plan your future steps.
Example: Analyze(your analysis of current situation and plan for future)

You can give a plan based on your collected information and analysis. The plan should include the ids of the station the robot need to visit.
Example: Plan([1,3,45,49])

Now, based on the input JSON query and collected information, please give the next action(only one action from StationSearch, DistanceSearch, Analyze, Plan) you want to take only with no explainations: 
Input query: 