#!/usr/bin/env python3
"""
Debug script to test budget constraint evaluation
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ski_planner_metrics import QueryParameterExtractor, PlannerResult, SkiPlannerMetrics

def test_budget_constraint():
    """Test budget constraint evaluation"""
    
    query = "Plan a 3-day ski trip to Livigno for 2 people with a budget of 1500 euros, need car rental and equipment"
    
    # Test parameter extraction
    extractor = QueryParameterExtractor()
    params = extractor.extract_parameters(query)
    
    print(f"Query: {query}")
    print(f"Extracted params: {params}")
    print(f"Budget: {params.get('budget')}")
    print(f"Car required: {params.get('car_required')}")
    print(f"Equipment required: {params.get('equipment_required')}")
    print()
    
    # Test Z3 result with actual plan text
    z3_result = PlannerResult(
        planner_name="Z3",
        query=query,
        result_type="optimal",
        plan_text="""Z3 SKI TRIP PLAN:

DESTINATION: Livigno
DURATION: 3 days
PEOPLE: 2
BUDGET: €1500

SELECTED RESORT: Livigno  Carosello/?Mottolino

RESORT DETAILS:
- Resort: Livigno  Carosello/?Mottolino
- Price per day: €243
- Beds available: 4
- Rating: 4.6/5

EQUIPMENT RENTAL:
- Skis: €49/day
- Boots: €26/day

CAR RENTAL:
- Car: €61/day
- Fuel type: Petrol

COST BREAKDOWN:
- Accommodation: €729.00
- Equipment: €450.00
- Car rental: €183.00
- TOTAL COST: €1362.00

BUDGET STATUS: ✅ Within budget

Generated by: Z3 Constraint Solver with Real Data Integration
Solver: Z3 SMT Solver
Model: DeepSeek-R1
Data Sources: Real API data""",
        cost=1362.0,
        runtime=2.98
    )
    
    metrics = SkiPlannerMetrics()
    z3_metrics = metrics.evaluate_single_result(z3_result)
    
    print("Z3 Metrics:")
    print(f"  Budget constraint: {z3_metrics['hard_constraint_pass_rate']}")
    print(f"  Micro constraints: {z3_metrics['hard_constraint_micro']}")
    print(f"  Macro constraints: {z3_metrics['hard_constraint_macro']}")
    print()
    
    # Test Gurobi result with actual plan text
    gurobi_result = PlannerResult(
        planner_name="Gurobi",
        query=query,
        result_type="optimal",
        plan_text="""### GUROBI SKI TRIP PLAN
**Query:** Plan a 3-day ski trip to Livigno for 2 people with a budget of 1500 euros, need car rental and equipment
**Result:** Optimal solution found!
**Selected Resort:** Livigno  Carosello/?Mottolino
**Total Cost:** €939.00
**Cost Breakdown:**
- Accommodation: €729.00
- Car Rental: €126.00
- Equipment Rental: €84.00

#### Accommodation
- Stay at Livigno  Carosello/?Mottolino for 3 days.
#### Car Rental
- Rented Car: Sedan (Petrol) for 3 days.
#### Equipment Rental
- Rented Equipment for 2 people for 3 days:
  - Poles (x2)""",
        cost=939.0,
        runtime=3.15
    )
    
    gurobi_metrics = metrics.evaluate_single_result(gurobi_result)
    
    print("Gurobi Metrics:")
    print(f"  Budget constraint: {gurobi_metrics['hard_constraint_pass_rate']}")
    print(f"  Micro constraints: {gurobi_metrics['hard_constraint_micro']}")
    print(f"  Macro constraints: {gurobi_metrics['hard_constraint_macro']}")
    print()
    
    # Test budget evaluation specifically
    print("Budget evaluation:")
    print(f"  Z3 cost: €{z3_result.cost} vs Budget: €{params.get('budget')}")
    print(f"  Gurobi cost: €{gurobi_result.cost} vs Budget: €{params.get('budget')}")
    
    if params.get('budget'):
        print(f"  Z3 within budget: {z3_result.cost <= params['budget']}")
        print(f"  Gurobi within budget: {gurobi_result.cost <= params['budget']}")

if __name__ == "__main__":
    test_budget_constraint()
